{"ast":null,"code":"const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\nconst bcrypt = require('bcrypt');\nconst multer = require('multer');\nconst pool = require('./db');\nconst bodyParser = require('body-parser');\nconst path = require('path');\nconst moment = require('moment');\nconst PORT = process.env.PORT || 3009;\nconst app = express();\nconst server = http.createServer(app); // Create HTTP server\nconst io = socketIo(server);\napp.use(bodyParser.json());\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cors({\n  origin: 'http://localhost:3000' // Replace with the client's origin (domain and port)\n}));\n\n// Serve static files from the 'uploads' folder\napp.use('/uploads', express.static('uploads'));\n\n// Middleware to handle CORS\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\n// Define a global variable to store messages for each room\nconst roomMessages = {};\nio.on('connection', socket => {\n  console.log('New client connected');\n  socket.on('joinRoom', ({\n    username,\n    room\n  }) => {\n    console.log(`${username} joined room ${room}`);\n    socket.join(room);\n    socket.username = username; // Assign username to socket\n    io.to(socket.id).emit('userAction', {\n      username: 'Server',\n      text: `Welcome to ${room}. Connect with others!`,\n      time: new Date().toLocaleTimeString()\n    });\n    socket.to(room).emit('userAction', {\n      username: 'Server',\n      text: `${username} joined the chatroom`,\n      time: new Date().toLocaleTimeString()\n    });\n    io.to(room).emit('roomUsers', {\n      room,\n      users: getUsersInRoom(room)\n    });\n\n    // Retrieve and send previous messages for the room\n    if (roomMessages[room]) {\n      socket.emit('previousMessages', roomMessages[room]);\n    }\n  });\n  socket.on('chatMessage', msg => {\n    console.log('Message:', msg);\n    io.to(msg.room).emit('message', formatMessage(msg)); // Broadcast message to all clients\n\n    // Store the message in roomMessages\n    if (!roomMessages[msg.room]) {\n      roomMessages[msg.room] = [];\n    }\n    roomMessages[msg.room].push(msg);\n  });\n  socket.on('notification', data => {\n    console.log('Received notification:', data);\n    io.emit('notification', data); // Broadcast the notification to all connected clients\n  });\n\n  // Inside the 'disconnect' event handler\n  socket.on('disconnect', () => {\n    if (socket.username) {\n      console.log(`${socket.username} disconnected`);\n      const room = Object.keys(socket.rooms)[1]; // Assuming the room is the second key in the rooms object\n      io.to(room).emit('userAction', {\n        username: 'Server',\n        text: `${socket.username} left the chatroom`,\n        time: new Date().toLocaleTimeString()\n      });\n      io.to(room).emit('roomUsers', {\n        room,\n        users: getUsersInRoom(room)\n      });\n    }\n  });\n});\nfunction formatMessage(text) {\n  return text;\n}\nfunction getUsersInRoom(room) {\n  const usersInRoom = io.sockets.adapter.rooms.get(room);\n  if (usersInRoom) {\n    return Array.from(usersInRoom).map(socketId => io.sockets.sockets.get(socketId).username);\n  } else {\n    return [];\n  }\n}\n\n// API endpoint to get user names\napp.get('/api/users', async (req, res) => {\n  try {\n    const connection = await pool.getConnection();\n    const [rows] = await connection.query('SELECT fullName FROM users');\n    connection.release();\n    res.json(rows);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// Login endpoint\napp.post('/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    // Retrieve the user record from the database using the email\n    const [user] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\n\n    // If no user found with the provided email\n    if (!user.length) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n\n    // Compare the hashed password with the password provided during login\n    const isPasswordValid = await bcrypt.compare(password, user[0].password);\n\n    // If passwords match, login is successful\n    if (isPasswordValid) {\n      // Attach user role to the request object\n      req.user = {\n        id: user[0].id,\n        email: user[0].email,\n        role: user[0].role\n      };\n      return res.status(200).json({\n        message: 'Login successful',\n        role: user[0].role\n      });\n    } else {\n      return res.status(401).json({\n        message: 'Invalid email or password'\n      });\n    }\n  } catch (error) {\n    console.error('Error during login:', error);\n    return res.status(500).json({\n      message: 'Login failed'\n    });\n  }\n});\n\n// Signup endpoint\napp.post('/signup', async (req, res) => {\n  const {\n    fullName,\n    email,\n    password\n  } = req.body;\n  try {\n    // Validate signup data\n    if (!fullName || !email || !password) {\n      return res.status(400).json({\n        message: 'All fields are required'\n      });\n    }\n\n    // Check if user with the same email already exists\n    const [existingUser] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\n    if (existingUser.length > 0) {\n      return res.status(400).json({\n        message: 'User with this email already exists'\n      });\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Insert user into the database\n    await pool.query('INSERT INTO users (fullName, email, password) VALUES (?, ?, ?)', [fullName, email, hashedPassword]);\n\n    // Return success response\n    res.status(201).json({\n      message: 'User created successfully'\n    });\n  } catch (error) {\n    console.error('Error during signup:', error);\n    res.status(500).json({\n      message: 'Error creating user'\n    });\n  }\n});\n\n// Configure multer for handling file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/'); // Destination folder for storing uploaded files\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Serve the uploaded files as static assets\napp.use('/uploads', express.static('uploads'));\n\n// API endpoint to fetch all posts\napp.get('/api/posts', async (req, res) => {\n  try {\n    // Fetch all posts from the database\n    const [posts] = await pool.query('SELECT * FROM posts');\n    res.status(200).json(posts);\n  } catch (error) {\n    console.error('Error retrieving posts:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// API endpoint to upload a post\napp.post('/api/posts', upload.single('file'), async (req, res) => {\n  try {\n    const {\n      caption\n    } = req.body;\n    const file = req.file;\n    if (!file) {\n      return res.status(400).json({\n        message: 'No file uploaded'\n      });\n    }\n    const query = 'INSERT INTO posts (file_path, caption, created_at) VALUES (?, ?, CURRENT_TIMESTAMP)';\n    const [result] = await pool.query(query, [file.filename, caption]);\n    const newPost = {\n      id: result.insertId,\n      url: `${req.protocol}://${req.get('host')}/uploads/${file.filename}`,\n      caption: caption,\n      type: file.mimetype.startsWith('image') ? 'image' : 'video',\n      likes: 0,\n      liked: false,\n      createdAt: new Date().toISOString()\n    };\n    res.status(201).json(newPost);\n  } catch (error) {\n    console.error('Error uploading post:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// API endpoint to handle liking a post\napp.put('/api/posts/:id/like', async (req, res) => {\n  const postId = req.params.id;\n  try {\n    // Update the 'likes' count for the post in the database\n    await pool.query('UPDATE posts SET likes = likes + 1 WHERE id = ?', [postId]);\n    res.status(200).json({\n      message: 'Post liked'\n    });\n  } catch (error) {\n    console.error('Error updating like:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// Routes\napp.get('/api/events', async (req, res) => {\n  // Use async function\n  try {\n    const connection = await pool.getConnection();\n    const [results] = await connection.query('SELECT * FROM events');\n    connection.release();\n    res.json(results);\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\napp.post('/api/events', async (req, res) => {\n  // Use async function\n  const {\n    name,\n    date,\n    time,\n    location,\n    sport\n  } = req.body;\n  try {\n    const connection = await pool.getConnection();\n    const [result] = await connection.query('INSERT INTO events (name, date, time, location, sport) VALUES (?, ?, ?, ?, ?)', [name, date, time, location, sport]);\n    connection.release();\n    const newEvent = {\n      id: result.insertId,\n      name,\n      date,\n      time,\n      location,\n      sport\n    };\n    res.status(201).json(newEvent);\n    // Inside the POST '/api/events' endpoint after successfully creating an event\n    io.emit('newEventCreated', {\n      message: 'Check your upcoming events, we have added a new event'\n    });\n  } catch (error) {\n    console.error('Error creating event:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n/// Route to handle event registration\napp.post('/api/events/:id/register', async (req, res) => {\n  const eventId = req.params.id;\n  const {\n    name,\n    email,\n    phoneNumber\n  } = req.body;\n  if (!name || !email || !phoneNumber) {\n    return res.status(400).json({\n      error: 'All fields are required'\n    });\n  }\n  try {\n    // Fetch event details based on eventId\n    const [eventDetails] = await pool.query('SELECT name, date, sport FROM events WHERE id = ?', [eventId]);\n    const eventName = eventDetails[0].name;\n    const eventDate = eventDetails[0].date;\n    const eventSport = eventDetails[0].sport;\n\n    // Insert registration details into the database\n    await pool.query('INSERT INTO event_registrations (event_id, name, email, phone_number, event_name, event_date, event_sport) VALUES (?, ?, ?, ?, ?, ?, ?)', [eventId, name, email, phoneNumber, eventName, eventDate, eventSport]);\n    res.status(200).json({\n      message: 'Registration successful'\n    });\n  } catch (error) {\n    console.error('Error registering for event:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","http","socketIo","cors","bcrypt","multer","pool","bodyParser","path","moment","PORT","process","env","app","server","createServer","io","use","json","urlencoded","extended","origin","static","req","res","next","header","roomMessages","on","socket","console","log","username","room","join","to","id","emit","text","time","Date","toLocaleTimeString","users","getUsersInRoom","msg","formatMessage","push","data","Object","keys","rooms","usersInRoom","sockets","adapter","get","Array","from","map","socketId","connection","getConnection","rows","query","release","error","status","post","email","password","body","user","length","message","isPasswordValid","compare","role","fullName","existingUser","hashedPassword","hash","storage","diskStorage","destination","file","cb","filename","fieldname","now","extname","originalname","upload","posts","single","caption","result","newPost","insertId","url","protocol","type","mimetype","startsWith","likes","liked","createdAt","toISOString","put","postId","params","results","name","date","location","sport","newEvent","eventId","phoneNumber","eventDetails","eventName","eventDate","eventSport","listen"],"sources":["C:/Users/Admin/Desktop/SPORTSWEBAPP/frontend/src/components/Notificationbar.js"],"sourcesContent":["const express = require('express');\r\nconst http = require('http');\r\nconst socketIo = require('socket.io');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcrypt');\r\nconst multer = require('multer');\r\nconst pool = require('./db');\r\nconst bodyParser = require('body-parser');\r\nconst path = require('path');\r\nconst moment = require('moment');\r\n\r\nconst PORT = process.env.PORT || 3009;\r\n\r\nconst app = express();\r\nconst server = http.createServer(app); // Create HTTP server\r\nconst io = socketIo(server);\r\n\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\napp.use(cors({\r\n  origin: 'http://localhost:3000' // Replace with the client's origin (domain and port)\r\n}));\r\n\r\n// Serve static files from the 'uploads' folder\r\napp.use('/uploads', express.static('uploads'));\r\n\r\n// Middleware to handle CORS\r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n  next();\r\n});\r\n\r\n// Define a global variable to store messages for each room\r\nconst roomMessages = {};\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('New client connected');\r\n\r\n  socket.on('joinRoom', ({ username, room }) => {\r\n    console.log(`${username} joined room ${room}`);\r\n    socket.join(room);\r\n    \r\n    socket.username = username; // Assign username to socket\r\n    io.to(socket.id).emit('userAction', { username: 'Server', text: `Welcome to ${room}. Connect with others!`, time: new Date().toLocaleTimeString() });\r\n    socket.to(room).emit('userAction', { username: 'Server', text: `${username} joined the chatroom`, time: new Date().toLocaleTimeString() });\r\n    io.to(room).emit('roomUsers', { room, users: getUsersInRoom(room) });\r\n\r\n    // Retrieve and send previous messages for the room\r\n    if (roomMessages[room]) {\r\n      socket.emit('previousMessages', roomMessages[room]);\r\n    }\r\n  });\r\n\r\n  socket.on('chatMessage', (msg) => {\r\n    console.log('Message:', msg);\r\n    io.to(msg.room).emit('message', formatMessage(msg)); // Broadcast message to all clients\r\n\r\n    // Store the message in roomMessages\r\n    if (!roomMessages[msg.room]) {\r\n      roomMessages[msg.room] = [];\r\n    }\r\n    roomMessages[msg.room].push(msg);\r\n  });\r\n\r\n  socket.on('notification', (data) => {\r\n    console.log('Received notification:', data);\r\n    io.emit('notification', data); // Broadcast the notification to all connected clients\r\n  });\r\n\r\n  // Inside the 'disconnect' event handler\r\n  socket.on('disconnect', () => {\r\n    if (socket.username) {\r\n      console.log(`${socket.username} disconnected`);\r\n      const room = Object.keys(socket.rooms)[1]; // Assuming the room is the second key in the rooms object\r\n      io.to(room).emit('userAction', { username: 'Server', text: `${socket.username} left the chatroom`, time: new Date().toLocaleTimeString() });\r\n      io.to(room).emit('roomUsers', { room, users: getUsersInRoom(room) });\r\n    }\r\n  });\r\n});\r\n\r\nfunction formatMessage(text) {\r\n  return text;\r\n}\r\n\r\nfunction getUsersInRoom(room) {\r\n  const usersInRoom = io.sockets.adapter.rooms.get(room);\r\n  if (usersInRoom) {\r\n    return Array.from(usersInRoom).map(socketId => io.sockets.sockets.get(socketId).username);\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\n// API endpoint to get user names\r\napp.get('/api/users', async (req, res) => {\r\n  try {\r\n    const connection = await pool.getConnection();\r\n    const [rows] = await connection.query('SELECT fullName FROM users');\r\n    connection.release();\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Login endpoint\r\napp.post('/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Retrieve the user record from the database using the email\r\n    const [user] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n\r\n    // If no user found with the provided email\r\n    if (!user.length) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    // Compare the hashed password with the password provided during login\r\n    const isPasswordValid = await bcrypt.compare(password, user[0].password);\r\n\r\n    // If passwords match, login is successful\r\n    if (isPasswordValid) {\r\n      // Attach user role to the request object\r\n      req.user = { id: user[0].id, email: user[0].email, role: user[0].role };\r\n      return res.status(200).json({ message: 'Login successful', role: user[0].role });\r\n    } else {\r\n      return res.status(401).json({ message: 'Invalid email or password' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error during login:', error);\r\n    return res.status(500).json({ message: 'Login failed' });\r\n  }\r\n});\r\n\r\n// Signup endpoint\r\napp.post('/signup', async (req, res) => {\r\n  const { fullName, email, password } = req.body;\r\n\r\n  try {\r\n    // Validate signup data\r\n    if (!fullName || !email || !password) {\r\n      return res.status(400).json({ message: 'All fields are required' });\r\n    }\r\n\r\n    // Check if user with the same email already exists\r\n    const [existingUser] = await pool.query('SELECT * FROM users WHERE email = ?', [email]);\r\n    if (existingUser.length > 0) {\r\n      return res.status(400).json({ message: 'User with this email already exists' });\r\n    }\r\n\r\n    // Hash the password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Insert user into the database\r\n    await pool.query('INSERT INTO users (fullName, email, password) VALUES (?, ?, ?)', [fullName, email, hashedPassword]);\r\n\r\n    // Return success response\r\n    res.status(201).json({ message: 'User created successfully' });\r\n  } catch (error) {\r\n    console.error('Error during signup:', error);\r\n    res.status(500).json({ message: 'Error creating user' });\r\n  }\r\n});\r\n\r\n// Configure multer for handling file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, cb) {\r\n    cb(null, 'uploads/'); // Destination folder for storing uploaded files\r\n  },\r\n  filename: function (req, file, cb) {\r\n    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\r\n  }\r\n});\r\n\r\nconst upload = multer({ storage: storage });\r\n\r\n// Serve the uploaded files as static assets\r\napp.use('/uploads', express.static('uploads'));\r\n\r\n// API endpoint to fetch all posts\r\napp.get('/api/posts', async (req, res) => {\r\n  try {\r\n    // Fetch all posts from the database\r\n    const [posts] = await pool.query('SELECT * FROM posts');\r\n    res.status(200).json(posts);\r\n  } catch (error) {\r\n    console.error('Error retrieving posts:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// API endpoint to upload a post\r\napp.post('/api/posts', upload.single('file'), async (req, res) => {\r\n  try {\r\n    const { caption } = req.body;\r\n    const file = req.file;\r\n\r\n    if (!file) {\r\n      return res.status(400).json({ message: 'No file uploaded' });\r\n    }\r\n\r\n    const query = 'INSERT INTO posts (file_path, caption, created_at) VALUES (?, ?, CURRENT_TIMESTAMP)';\r\n    const [result] = await pool.query(query, [file.filename, caption]);\r\n\r\n    const newPost = {\r\n      id: result.insertId,\r\n      url: `${req.protocol}://${req.get('host')}/uploads/${file.filename}`,\r\n      caption: caption,\r\n      type: file.mimetype.startsWith('image') ? 'image' : 'video',\r\n      likes: 0,\r\n      liked: false,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    res.status(201).json(newPost);\r\n  } catch (error) {\r\n    console.error('Error uploading post:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// API endpoint to handle liking a post\r\napp.put('/api/posts/:id/like', async (req, res) => {\r\n  const postId = req.params.id;\r\n\r\n  try {\r\n    // Update the 'likes' count for the post in the database\r\n    await pool.query('UPDATE posts SET likes = likes + 1 WHERE id = ?', [postId]);\r\n    res.status(200).json({ message: 'Post liked' });\r\n  } catch (error) {\r\n    console.error('Error updating like:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Routes\r\napp.get('/api/events', async (req, res) => { // Use async function\r\n  try {\r\n    const connection = await pool.getConnection();\r\n    const [results] = await connection.query('SELECT * FROM events');\r\n    connection.release();\r\n    res.json(results);\r\n  } catch (error) {\r\n    console.error('Error fetching events:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\napp.post('/api/events', async (req, res) => { // Use async function\r\n  const { name, date, time, location, sport } = req.body;\r\n  try {\r\n    const connection = await pool.getConnection();\r\n    const [result] = await connection.query(\r\n      'INSERT INTO events (name, date, time, location, sport) VALUES (?, ?, ?, ?, ?)',\r\n      [name, date, time, location, sport]\r\n    );\r\n    connection.release();\r\n    const newEvent = { id: result.insertId, name, date, time, location, sport };\r\n    res.status(201).json(newEvent);\r\n    // Inside the POST '/api/events' endpoint after successfully creating an event\r\n    io.emit('newEventCreated', { message: 'Check your upcoming events, we have added a new event' });\r\n  } catch (error) {\r\n    console.error('Error creating event:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n/// Route to handle event registration\r\napp.post('/api/events/:id/register', async (req, res) => {\r\n  const eventId = req.params.id;\r\n  const { name, email, phoneNumber } = req.body;\r\n\r\n  if (!name || !email || !phoneNumber) {\r\n    return res.status(400).json({ error: 'All fields are required' });\r\n  }\r\n\r\n  try {\r\n    // Fetch event details based on eventId\r\n    const [eventDetails] = await pool.query('SELECT name, date, sport FROM events WHERE id = ?', [eventId]);\r\n    const eventName = eventDetails[0].name;\r\n    const eventDate = eventDetails[0].date;\r\n    const eventSport = eventDetails[0].sport;\r\n\r\n    // Insert registration details into the database\r\n    await pool.query('INSERT INTO event_registrations (event_id, name, email, phone_number, event_name, event_date, event_sport) VALUES (?, ?, ?, ?, ?, ?, ?)', [eventId, name, email, phoneNumber, eventName, eventDate, eventSport]);\r\n    res.status(200).json({ message: 'Registration successful' });\r\n  } catch (error) {\r\n    console.error('Error registering for event:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}