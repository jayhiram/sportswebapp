{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\SPORTSWEBAPP\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Gallery from './Gallery'; // Assuming you have a Gallery component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    // Perform authentication check when the component mounts\n    const checkAdminStatus = async () => {\n      // Make a request to your backend server to check if the user is an admin\n      try {\n        const response = await fetch('/api/check-admin-status', {\n          method: 'GET',\n          credentials: 'include' // Include cookies for authentication\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setIsAdmin(data.isAdmin); // Set isAdmin state based on the response\n        } else {\n          setIsAdmin(false); // Set isAdmin to false if the request fails\n        }\n      } catch (error) {\n        console.error('Error checking admin status:', error);\n        setIsAdmin(false); // Set isAdmin to false if there's an error\n      }\n    };\n    checkAdminStatus(); // Call the function to check admin status\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Gallery, {\n      isAdmin: isAdmin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Zkrc/jvYeP+Lg60sj9ov6ALel5o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Gallery","jsxDEV","_jsxDEV","App","_s","isAdmin","setIsAdmin","checkAdminStatus","response","fetch","method","credentials","ok","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/SPORTSWEBAPP/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Gallery from './Gallery'; // Assuming you have a Gallery component\r\n\r\nconst App = () => {\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Perform authentication check when the component mounts\r\n    const checkAdminStatus = async () => {\r\n      // Make a request to your backend server to check if the user is an admin\r\n      try {\r\n        const response = await fetch('/api/check-admin-status', {\r\n          method: 'GET',\r\n          credentials: 'include' // Include cookies for authentication\r\n        });\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setIsAdmin(data.isAdmin); // Set isAdmin state based on the response\r\n        } else {\r\n          setIsAdmin(false); // Set isAdmin to false if the request fails\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking admin status:', error);\r\n        setIsAdmin(false); // Set isAdmin to false if there's an error\r\n      }\r\n    };\r\n\r\n    checkAdminStatus(); // Call the function to check admin status\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome to the Gallery</h1>\r\n      <Gallery isAdmin={isAdmin} /> {/* Pass isAdmin prop to the Gallery component */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC;MACA,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,EAAE;UACtDC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE,SAAS,CAAC;QACzB,CAAC,CAAC;QACF,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UAClCR,UAAU,CAACO,IAAI,CAACR,OAAO,CAAC,CAAC,CAAC;QAC5B,CAAC,MAAM;UACLC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACrB;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDT,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDC,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BnB,OAAA,CAACF,OAAO;MAACK,OAAO,EAAEA;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV,CAAC;AAACjB,EAAA,CAjCID,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAmCT,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}